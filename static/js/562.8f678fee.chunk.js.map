{"version":3,"file":"static/js/562.8f678fee.chunk.js","mappings":"oMACA,KCAA,EAAyB,wBCAzB,EAAuB,mB,SCIhB,SAASA,EAAKC,GACjB,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKC,IAAI,2DACRH,EAAMI,QAFX,KAEoB,oCAAYJ,EAAMK,iB,8DCH1CC,GAAYC,EAAAA,EAAAA,GAAiB,IAiB1B,IAAMC,GAAmBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,eAAjBD,EAhBzB,SAAqBT,GACxB,OACI,kBAAMW,SAAUX,EAAMY,aAAtB,WACI,SAACC,EAAA,EAAD,CACOC,KAAK,cACLC,UAAWC,EAAAA,EACXC,YAAY,eACZC,SAAU,CAACC,EAAAA,EAAUb,MAE5B,0BACI,iDCTHc,EAAUC,EAAAA,MAAW,SAAiBrB,GAE/C,IAAMsB,GAAWC,EAAAA,EAAAA,MAEXC,EAAgBxB,EAAMyB,MACvBC,KAAI,SAACC,GAAD,OAAU,SAAC5B,EAAD,CAAM6B,GAAID,EAAKC,GACCxB,QAASuB,EAAKvB,QACdC,WAAYsB,EAAKtB,YACZsB,EAAKC,OAM7C,OACI,iBAAK3B,UAAWC,EAAhB,WACI,sCACA,SAACM,EAAD,CAAkBG,SAPP,SAACkB,GAChBP,GAASQ,EAAAA,EAAAA,IAAUD,EAAOE,iBAOrBP,QCzBb,GAAgB,aAAe,mC,mBCA/B,EAAqC,0CCU9B,SAASQ,EAAuBhC,GAEnC,IAAMsB,GAAWC,EAAAA,EAAAA,MAEjB,GAAgCU,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA4BF,EAAAA,EAAAA,UAASjC,EAAMoC,QAA3C,eAAOA,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WACND,EAAUrC,EAAMoC,UACjB,CAACpC,EAAMoC,SAaV,OACI,iBAAKnC,UAAWC,EAAhB,WACMgC,IACF,0BACI,iBAAMK,cAfK,WACnBJ,GAAY,IAcJ,SAAsCnC,EAAMoC,WAG/CF,IACD,0BACI,kBAAOM,SAbI,SAACC,GACpBJ,EAAUI,EAAEC,cAAcC,QAYeC,WAAW,EAAMC,OAjBrC,WACrBV,GAAY,GACZb,GAASwB,EAAAA,EAAAA,IAAaV,KAe8DO,MAAOP,SClC5F,SAASW,EAAY/C,GAExB,OAAKA,EAAMgD,SAKP,iBAAK/C,UAAWC,EAAAA,iBAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,UACI,gBAAKC,IAAKH,EAAMgD,QAAQC,OAAOC,WAEnC,SAAClB,EAAD,CAAwBI,OAAQpC,EAAMoC,aARnC,SAAC,IAAD,I,cCuBf,MAtBC,WACG,IAAMd,GAAWC,EAAAA,EAAAA,MACZ4B,GAAUC,EAAAA,EAAAA,MAAVD,OAECE,GAAcC,EAAAA,EAAAA,KAA6C,SAAAC,GAAK,OAAIA,EAAMF,eAShF,OARAf,EAAAA,EAAAA,YAAU,WACNhB,GAASkC,EAAAA,EAAAA,IAAeL,MACzB,KACHb,EAAAA,EAAAA,YAAU,WACNhB,GAASmC,EAAAA,EAAAA,IAAUN,MACpB,KAIC,iBAAKlD,UAAWC,EAAAA,aAAhB,WACI,SAAC6C,EAAD,CAAaC,QAASK,EAAYL,QAASZ,OAAQiB,EAAYjB,UAC/D,SAAChB,EAAD,CACIK,MAAO4B,EAAY5B","sources":["components/Profile/Profile.module.scss","webpack://my-social-network-app-ts/./src/components/Profile/MyPosts/MyPosts.module.scss?39b9","webpack://my-social-network-app-ts/./src/components/Profile/MyPosts/Post/Post.module.scss?ca59","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo.module.scss","webpack://my-social-network-app-ts/./src/components/Profile/ProfileStatus.module.scss?7b0b","components/Profile/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo.tsx","components/Profile/Profile.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"myPots\":\"MyPosts_myPots__a1HUq\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__Xh0et\"};","import React from \"react\";\nimport s from \"./Post.module.scss\"\nimport {PostType} from \"../../../../Redux/profile-reducer\";\n\n\nexport function Post(props: PostType) {\n    return (\n        <div className={s.post}>\n            <img src=\"https://avatarko.ru/img/kartinka/33/Deadpool_34458.jpg\"/>\n            {props.message} <div>like: {props.likesCount}</div>\n        </div>\n    )\n}","import React from \"react\";\nimport s from \"./AddPostsForm.module.scss\"\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\nlet maxLength = maxLengthCreator(10)\nexport function AddPostForm(props: any) {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field\n                   name=\"newPostText\"\n                   component={Textarea}\n                   placeholder=\"Post message\"\n                   validate={[required, maxLength]}\n            />\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\n\nexport const AddPostReduxForm = reduxForm({form: 'PostAddForm'})(AddPostForm)","import React from \"react\";\nimport s from \"./MyPosts.module.scss\"\nimport {Post} from \"./Post/Post\";\nimport {addPostAC, MyPostsPropsType} from \"../../../Redux/profile-reducer\";\nimport {useDispatch} from \"react-redux\";\nimport {AddPostReduxForm} from \"./AddPostForm\";\n\n\nexport const MyPosts = React.memo(function MyPosts(props: MyPostsPropsType) {\n\n    const dispatch = useDispatch()\n\n    const postsElements = props.posts\n        .map((post) => <Post id={post.id}\n                                       message={post.message}\n                                       likesCount={post.likesCount}\n                                       key={post.id}/>)\n\n    const addNewPost = (values: any) => {\n        dispatch(addPostAC(values.newPostText))\n    }\n\n    return (\n        <div className={s.myPots}>\n            <h2>My posts</h2>\n            <AddPostReduxForm onSubmit={addNewPost}/>\n            {postsElements}\n        </div>\n    )\n})","// extracted by mini-css-extract-plugin\nexport default {\"profilePhoto\":\"ProfileInfo_profilePhoto__S0b8Y\"};","// extracted by mini-css-extract-plugin\nexport default {\"profileStatusBlock\":\"ProfileStatus_profileStatusBlock__4msfx\"};","import React, {useEffect, useState} from \"react\";\nimport s from \"./ProfileStatus.module.scss\";\nimport {useDispatch} from \"react-redux\";\nimport {updateStatus} from \"../../Redux/profile-reducer\";\n\n\ntype ProfileStatusPropsType = {\n    status: string\n\n}\n\nexport function ProfileStatusWithHooks(props: ProfileStatusPropsType) {\n\n    const dispatch = useDispatch()\n\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activeEditMode = () => {\n        setEditMode(true)\n    }\n    const deActiveEditMode = () => {\n        setEditMode(false)\n        dispatch(updateStatus(status))\n    }\n    const onStatusChange = (e: any) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div className={s.profileStatusBlock}>\n            {!editMode &&\n            <div>\n                <span onDoubleClick={activeEditMode}>{props.status}</span>\n            </div>\n            }\n            {editMode &&\n            <div>\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deActiveEditMode} value={status}/>\n            </div>\n            }\n        </div>\n    )\n}","import React from \"react\";\nimport s from \"./ProfileInfo.module.scss\"\nimport {ProfileInfoPropsType} from \"../../Redux/profile-reducer\";\nimport {Preloader} from \"../common/Preloader/Preloager\";\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\n\n\n\nexport function ProfileInfo(props: ProfileInfoPropsType ){\n\n    if (!props.profile){\n        return <Preloader/>\n    }\n\n    return(\n        <div className={s.profileInfoBlock}>\n            <div className={s.profilePhoto}>\n                <img src={props.profile.photos.large}/>\n            </div>\n            <ProfileStatusWithHooks status={props.status}/>\n        </div>\n    )\n}","import React, {useEffect} from \"react\";\nimport s from \"./Profile.module.scss\"\nimport {MyPosts} from \"./MyPosts/MyPosts\";\nimport {ProfileInfo} from \"./ProfileInfo\";\nimport {RootStateType} from \"../../Redux/store\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getStatus, getUserProfile, initialStateType} from \"../../Redux/profile-reducer\";\nimport {useParams} from \"react-router-dom\";\n\n\n\n\n function Profile() {\n    const dispatch = useDispatch()\n    let {userId} = useParams()\n\n    const profilePage = useSelector<RootStateType, initialStateType>(state => state.profilePage)\n    useEffect(() => {\n        dispatch(getUserProfile(userId))\n    }, [])\n    useEffect(() => {\n        dispatch(getStatus(userId))\n    }, [])\n\n\n    return (\n        <div className={s.profileBlock}>\n            <ProfileInfo profile={profilePage.profile} status={profilePage.status}/>\n            <MyPosts\n                posts={profilePage.posts}\n            />\n        </div>\n    )\n}\nexport default Profile"],"names":["Post","props","className","s","src","message","likesCount","maxLength","maxLengthCreator","AddPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPosts","React","dispatch","useDispatch","postsElements","posts","map","post","id","values","addPostAC","newPostText","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","photos","large","userId","useParams","profilePage","useSelector","state","getUserProfile","getStatus"],"sourceRoot":""}