{"version":3,"file":"static/js/100.1fcd143a.chunk.js","mappings":"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","sources":["components/Profile/Profile.module.scss","webpack://my-social-network-app-ts/./src/components/Profile/MyPosts/MyPosts.module.scss?39b9","webpack://my-social-network-app-ts/./src/components/Profile/MyPosts/Post/Post.module.scss?ca59","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","webpack://my-social-network-app-ts/./src/components/Profile/ProfileInfo.module.scss?5497","components/Profile/ProfileStatus.module.scss","components/Profile/ProfileStatusWithHooks.tsx","components/Profile/ProfileData.module.scss","components/Profile/ProfileData.tsx","components/Profile/ProfileDataForm.tsx","components/Profile/ProfileInfo.tsx","components/Profile/Profile.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"myPots\":\"MyPosts_myPots__a1HUq\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__Xh0et\"};","import React from \"react\";\nimport s from \"./Post.module.scss\"\nimport {PostType} from \"../../../../Redux/profile-reducer\";\n\n\nexport function Post(props: PostType) {\n    return (\n        <div className={s.post}>\n            <img src=\"https://avatarko.ru/img/kartinka/33/Deadpool_34458.jpg\"/>\n            {props.message} <div>like: {props.likesCount}</div>\n        </div>\n    )\n}","import React from \"react\";\nimport s from \"./AddPostsForm.module.scss\"\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\nlet maxLength = maxLengthCreator(10)\nexport function AddPostForm(props: any) {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field\n                   name=\"newPostText\"\n                   component={Textarea}\n                   placeholder=\"Post message\"\n                   validate={[required, maxLength]}\n            />\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\n\nexport const AddPostReduxForm = reduxForm({form: 'PostAddForm'})(AddPostForm)","import React from \"react\";\nimport s from \"./MyPosts.module.scss\"\nimport {Post} from \"./Post/Post\";\nimport {addPostAC, MyPostsPropsType} from \"../../../Redux/profile-reducer\";\nimport {useDispatch} from \"react-redux\";\nimport {AddPostReduxForm} from \"./AddPostForm\";\n\n\nexport const MyPosts = React.memo(function MyPosts(props: MyPostsPropsType) {\n\n    const dispatch = useDispatch()\n\n    const postsElements = props.posts\n        .map((post) => <Post id={post.id}\n                                       message={post.message}\n                                       likesCount={post.likesCount}\n                                       key={post.id}/>)\n\n    const addNewPost = (values: any) => {\n        dispatch(addPostAC(values.newPostText))\n    }\n\n    return (\n        <div className={s.myPots}>\n            <h2>My posts</h2>\n            <AddPostReduxForm onSubmit={addNewPost}/>\n            {postsElements}\n        </div>\n    )\n})","// extracted by mini-css-extract-plugin\nexport default {\"profileInfoBlock\":\"ProfileInfo_profileInfoBlock__79Bqd\",\"profilePhoto\":\"ProfileInfo_profilePhoto__S0b8Y\"};","// extracted by mini-css-extract-plugin\nexport default {};","import React, {useEffect, useState} from \"react\";\nimport s from \"./ProfileStatus.module.scss\";\nimport {useDispatch} from \"react-redux\";\nimport {updateStatus} from \"../../Redux/profile-reducer\";\n\n\ntype ProfileStatusPropsType = {\n    status: string\n\n}\n\nexport function ProfileStatusWithHooks(props: ProfileStatusPropsType) {\n\n    const dispatch = useDispatch()\n\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activeEditMode = () => {\n        setEditMode(true)\n    }\n    const deActiveEditMode = () => {\n        setEditMode(false)\n        dispatch(updateStatus(status))\n    }\n    const onStatusChange = (e: any) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div className={s.profileStatusBlock}>\n            {!editMode &&\n            <div>\n               <b>Status</b>: <span onDoubleClick={activeEditMode}>{props.status}</span>\n            </div>\n            }\n            {editMode &&\n            <div>\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deActiveEditMode} value={status}/>\n            </div>\n            }\n        </div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {};","import React from \"react\";\nimport s from \"./ProfileData.module.scss\"\nimport {ContactsType, ProfileType} from \"../../Redux/profile-reducer\";\n\ntype ProfileDataPropsType = {\n    profile: ProfileType\n    isOwner:boolean\n    goToEditMode:()=>void\n}\ntype ContactPropsType ={\n    contactTitle: string\n    contactValues: string\n}\n\nexport const ProfileData:React.FC<ProfileDataPropsType> = ({profile,isOwner,goToEditMode}) => {\n\n    const Contact:React.FC<ContactPropsType> = ({contactTitle, contactValues}) => {\n        return(\n            <div className={s.contact}>\n                <b>{contactTitle}</b>: {contactValues}\n            </div>\n        )\n    }\n    return(\n        <div>\n            {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\n            <div>\n                <b>Full name</b>: {profile.fullName}\n            </div>\n            <div>\n                <b>lookingForAJob</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\n            </div>\n            {profile.lookingForAJob &&\n            <div>\n                <b>My Professional skills</b>: {profile.lookingForAJobDescription}\n            </div>\n            }\n            <div>\n                <b>Contacts</b>: {\n                Object.keys(profile.contacts)\n                    .map(key =>{\n                return <Contact key={key} contactTitle={key} contactValues={profile.contacts[key as keyof ContactsType]}/>\n            })}\n            </div>\n        </div>\n    )\n}\n","import React from \"react\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {createField, Input, Textarea} from \"../common/FormsControls/FormsControls\";\nimport {required} from \"../../utils/validators/validators\";\nimport s from \"../Login/LoginForm.module.scss\";\nimport {ProfileType} from \"../../Redux/profile-reducer\";\n\n\ntype PropsType = {\n    profile: ProfileType\n}\nexport const ProfileDataForm:React.FC<InjectedFormProps<ProfileType,PropsType> & PropsType>\n    =({handleSubmit, profile, error}) =>{\n    return(\n        <form onSubmit={handleSubmit}>\n        <button>save</button>\n            { error && <div className={s.formSummaryError}>\n                <span>{error}</span>\n            </div>}\n        <div>\n            <b>Full name</b>: {createField(\"Full name\",\"fullName\", [required], Input)}\n        </div>\n        <div>\n            <b>Looking for a job</b>: {createField(\"Full name\",\"lookingForAJob\", [required], Input, {type:\"checkbox\"},\"remember me\" )}\n        </div>\n        <div>\n            <b>My Professional skills</b>: {createField(\"My Professional skills\",\"lookingForAJobDescription\", [required], Textarea)}\n        </div>\n        <div>\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\n            return <div key={key}>\n                <b>{key}: {createField(key,\"contacts.\" + key ,[], Input)}</b>\n            </div>\n        })}\n            </div>\n            </form>\n            )}\n\nexport const ProfileDataReduxForm = reduxForm<ProfileType,PropsType>({form: 'edit-profile'})(ProfileDataForm)\n","import React, {ChangeEvent, useState} from \"react\";\nimport s from \"./ProfileInfo.module.scss\"\nimport {ProfileInfoPropsType, savePhoto, saveProfile} from \"../../Redux/profile-reducer\";\nimport {Preloader} from \"../common/Preloader/Preloager\";\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\nimport userAva from '../../assets/images/account_avatar.png'\nimport {useDispatch} from \"react-redux\";\nimport {ProfileData} from \"./ProfileData\";\nimport {ProfileDataReduxForm} from \"./ProfileDataForm\";\n\n\nexport function ProfileInfo(props: ProfileInfoPropsType) {\n    const [editMode, setEditMode] = useState(false)\n    const dispatch = useDispatch()\n    if (!props.profile) {\n        return <Preloader/>\n    }\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files?.length) {\n            dispatch(savePhoto(e.target.files[0]))\n        }\n    }\n\n    const onSubmit = (formData: any) => {\n        dispatch(saveProfile(formData))\n        setEditMode(false)\n    }\n    return (\n        <div className={s.profileInfoBlock}>\n            <div className={s.profilePhoto}>\n                <img src={props.profile.photos.large || userAva}/>\n            </div>\n            {props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\n            {editMode\n                ? <ProfileDataReduxForm onSubmit={onSubmit} initialValues={props.profile} profile={props.profile} />\n                : <ProfileData profile={props.profile} isOwner={props.isOwner} goToEditMode={() => {\n                    setEditMode(true)\n                }}/>\n            }\n            <ProfileStatusWithHooks status={props.status}/>\n\n        </div>\n    )\n}\n\n\n\n","import React, {useEffect} from \"react\";\nimport s from \"./Profile.module.scss\"\nimport {MyPosts} from \"./MyPosts/MyPosts\";\nimport {ProfileInfo} from \"./ProfileInfo\";\nimport {RootStateType} from \"../../Redux/store\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getStatus, getUserProfile, initialStateType} from \"../../Redux/profile-reducer\";\nimport {useParams} from \"react-router-dom\";\n\n\nfunction Profile() {\n    const dispatch = useDispatch()\n    let {userId} = useParams()\n    const profilePage = useSelector<RootStateType, initialStateType>(state => state.profilePage)\n    useEffect(() => {\n        dispatch(getUserProfile(userId))\n    }, [])\n    useEffect(() => {\n        dispatch(getStatus(userId))\n    }, [])\n\n    return (\n        <div className={s.profileBlock}>\n            <ProfileInfo profile={profilePage.profile} status={profilePage.status} isOwner={!!userId}/>\n            <MyPosts\n                posts={profilePage.posts}\n            />\n        </div>\n    )\n}\n\nexport default Profile"],"names":["Post","props","className","s","src","message","likesCount","maxLength","maxLengthCreator","AddPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPosts","React","dispatch","useDispatch","postsElements","posts","map","post","id","values","addPostAC","newPostText","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileData","profile","isOwner","goToEditMode","Contact","contactTitle","contactValues","onClick","fullName","lookingForAJob","lookingForAJobDescription","Object","keys","contacts","key","ProfileDataReduxForm","error","createField","Input","type","ProfileInfo","photos","large","userAva","target","files","length","savePhoto","formData","saveProfile","initialValues","userId","useParams","profilePage","useSelector","state","getUserProfile","getStatus"],"sourceRoot":""}